"""
This type stub file was generated by pyright.
"""

from typing import Any

class Queryish:
    filters: list[tuple[str, Any]] = ...
    model: type[VirtualModel] | None = ...
    limit: int | None = ...
    offset: int = ...
    ordering: tuple[str, ...] = ...

    def __init__(self) -> None: ...
    def run_query(self): ...
    def run_count(self):  # -> int:
        ...
    def __iter__(self):  # -> Generator[Any, Any, None]:
        ...
    def count(self):  # -> int:
        ...
    def __len__(self):  # -> int:
        ...
    def clone(self, **kwargs):  # -> Self:
        ...
    def filter_is_valid(self, key, val):  # -> bool:
        ...
    def filter(self, **kwargs):  # -> Self:
        ...
    def ordering_is_valid(self, key):  # -> bool:
        ...
    def order_by(self, *args):  # -> Self:
        ...
    def get(self, **kwargs): ...
    def first(self):  # -> None:
        ...
    def all(self):  # -> Self:
        ...
    @property
    def ordered(self):  # -> bool:
        ...
    def __getitem__(self, key):  # -> Self:
        ...
    def __repr__(self):  # -> str:
        ...

class VirtualModelOptions:
    def __init__(
        self, model_name, fields, verbose_name, verbose_name_plural
    ) -> None: ...

class VirtualModelMetaclass(type):
    def __new__(cls, name, bases, attrs):  # -> Self:
        ...

class VirtualModel(metaclass=VirtualModelMetaclass):
    objects: Queryish = ...
    base_query_class = ...
    pk_field_name = ...
    @classmethod
    def from_query_data(cls, data):  # -> Self:
        ...
    @classmethod
    def from_individual_data(cls, data):  # -> Self:
        ...
    def __init__(self, **kwargs) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self):  # -> str:
        ...
